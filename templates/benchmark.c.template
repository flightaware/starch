/* starch generated code. Do not edit. */

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <inttypes.h>
#include <time.h>

#include "${os.path.relpath(gen.generated_include_path, current_dir)}"

const unsigned starch_benchmark_warmup_loops = 100;
const unsigned starch_benchmark_loops = 100000;

typedef struct timespec starch_benchmark_time;
inline void starch_benchmark_get_time(starch_benchmark_time *t)
{
    clock_gettime(CLOCK_MONOTONIC, t);
}

uint64_t starch_benchmark_elapsed(starch_benchmark_time *start, starch_benchmark_time *end)
{
    return ((uint64_t)end->tv_sec - (uint64_t)start->tv_sec) * 1000000000U + (uint64_t)end->tv_nsec - (uint64_t)start->tv_nsec;
}

<% functions_to_benchmark = [f for f in gen.functions.values() if f.has_benchmark] %>
% for function in functions_to_benchmark:
void starch_benchmark_one_${function.name}( ${function.regentry_type} * _entry, ${function.declaration_arglist } )
{
    fprintf(stderr, "  %-40.40s  ", _entry->name);

    /* test for support */
    if (_entry->flavor_supported && !(_entry->flavor_supported())) {
        fprintf(stderr, "unsupported\n");
        return;
    }

    /* warmup */
    for (unsigned _loop = 0; _loop < starch_benchmark_warmup_loops; ++_loop)
        _entry->callable ( ${function.named_arglist} );

    /* benchmark */
    starch_benchmark_time _start, _end;
    starch_benchmark_get_time(&_start);
    for (unsigned _loop = 0; _loop < starch_benchmark_loops; ++_loop)
        _entry->callable ( ${function.named_arglist} );
    starch_benchmark_get_time(&_end);

    uint64_t _elapsed = starch_benchmark_elapsed(&_start, &_end);
    uint64_t _per_loop = _elapsed / starch_benchmark_loops;
    fprintf(stderr, "%" PRIu64 " ns/call\n", _per_loop);
}
% endfor

#define STARCH_SYMBOL(_name) ${gen.symbol_prefix} ## _name ## _benchmark_sym
#define STARCH_IMPL(_function,_impl) ${gen.symbol_prefix} ## _function ## _ ## _impl ## _dummy_benchmark
#define STARCH_IMPL_REQUIRES(_function,_impl,_feature) STARCH_IMPL(_function,_impl)
#define STARCH_BENCHMARK(_function) ${gen.symbol_prefix} ## _function ## _benchmark

#define STARCH_BENCHMARK_RUN(_function, ...)                                                     \
    for (${function.regentry_type} *entry = ${function.registry_symbol}; entry->name; ++entry) { \
        starch_benchmark_one_ ## _function ( entry, __VA_ARGS__ );                               \
    }

% for source in gen.source_files:
#include "${os.path.relpath(source.path, current_dir)}"
% endfor

% for function in functions_to_benchmark:
void starch_benchmark_all_${function.name}(void)
{
    fprintf(stderr, "==== ${function.name} ====\n");
    STARCH_BENCHMARK(${function.name}) ();
}
% endfor

int main(int argc, char **argv)
{
% for function in functions_to_benchmark:
    starch_benchmark_all_${function.name}();
% endfor
}

