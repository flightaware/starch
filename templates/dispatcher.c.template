<%! import os %>
/* starch generated code. Do not edit. */

#include <stdlib.h>
#include "${os.path.relpath(gen.generated_include_path, target_dir)}"

% for function in gen.functions.values():
/* dispatcher / registry for ${function.name} */

${function.regentry_type} * ${function.select_symbol}() {
   for (${function.regentry_type} *entry = ${function.registry_symbol};
        entry->name;
        ++entry)
   {
       if (entry->flavor_supported && !(entry->flavor_supported()))
           continue;
       return entry;
   }
   return NULL;
}

${function.returntype} ${function.dispatcher_symbol} ( ${function.declaration_arglist} ) {
    ${function.regentry_type} *entry = ${function.select_symbol}();
    if (!entry)
        abort();

    ${function.callable_symbol} = entry->callable;
% if function.returntype == 'void':
    ${function.callable_symbol} ( ${function.named_arglist} );
% else:
    return ${function.callable_symbol} ( ${function.named_arglist} );
% endif
}

${function.pointer_type} ${function.callable_symbol} = ${function.dispatcher_symbol};

${function.regentry_type} ${function.registry_symbol}[] = {
 % for mix in gen.mixes.values():
#ifdef ${mix.macro}
  % for flavor in mix.flavors:
    % for impl in function.impls:
      % if impl.feature is None or impl.feature in flavor.features:
    { "${impl.name}_${flavor.name}", ${impl.impl_symbol(flavor)}, ${flavor.test_function_expr} },
      % endif
    % endfor
  % endfor
#endif /* ${mix.macro} */
% endfor
    { NULL, NULL, NULL }
};

% endfor
